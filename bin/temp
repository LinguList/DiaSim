//testing DHSWrapper.RULE_IND_MAP
// prev RIM :  {0, 1, 2, 3, 4, 5, 6, -1, 7, 8, 9, 10} 
corrRIM = {0, 6, 1, 2, 3, 4, 5, -1, 7, 8, 9, 10}
errorCount += UTILS.checkBoolean(true, UTILS.compare1dIntArrs(corrRIM, DHSW.getRULE_IND_MAP()),
	"ERROR: forward relocdation is not handled correctly in RULE_IND_MAP." ) ? 0 : 1; 

//test DHSWrapper.hypGoldLocs
errorCount += UTILS.checkBoolean(true, UTILS.compare1dIntArrs(int[] {5, 7}, DHSW.getHypGoldLocs()),
	"ERROR: update on hypGoldLocs for forward relocdation following a not-yet-accepted simple deletion hyp not executed properly." ) ? 0 : 1; 

//test DHSW.proposedChanges
thepc = DHSW.getProposedChanges().get(0); 
	// should still be as before. 
errorCount += UTILS.checkBoolean(true, "7".equals(thepc[0]) && "deletion".equals(thepc[1]) && "we're Yankees".equals(thepc[2]),
	"ERROR: earlier not-yet-accepted hypothesis change is corrupted by processing of a new change!") ? 0 : 1 ; 
//now test processing of the second change, which should consist of one deletion and one insertion.
// first test the deletion.
thepc = DHSW.getProposedChanges().get(1); 
errorCount += UTILS.checkBoolean(true, "1".equals(thepc[0]) && "deletion".equals(thepc[1]) && "Relocated to after first waypoint".equals(thepc[2]) ,
	"ERROR: deletion part of update on proposedChanges for forward relocdation handled incorrectly!") ? 0:1;
// and then the insertion phase
thepc = DHSW.getProposedChanges().get(2);
errorCount += UTILS.checkBoolean( true , "5".equals(thepc[0]) && "[-delrel,+cor] > É¾ / [-cons] __ [-stres]".equals(thepc[1]) && 
	"Relocated from former step 1".equals(thepc[2]), "ERROR: processing of insertion phase of update on proposedChanges for forward relocdation "
		+"executed incorrectly!") ? 0 : 1; 

	
	-----
		
TODO - jargon file. 