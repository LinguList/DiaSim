working on relocdation capabilities...


		while (gi < total_length)
		{
			boolean bihiAligned = (ilbi == hi) && (ilhi == bi); 
				// i.e. the current spots in the base and hyp share the same global index
			if(borrowForHI)	hi--;
			
			if (bihiAligned)
			{	ruleCorrespondences[0][gi] = ilbi; bi++;
				ruleCorrespondences[1][gi] = ilhi; hi++;
			}
			if(advance1OnBoth)	{	bi++;	hi++;	}
			else // we will have to do some asymmetrical operation -- and there must have been a propCh here 
			{
				locHasPrCh[gi] = true; 
				assert ilbi != ilhi || ilbi != -1: 
					"ERROR: cannot have a rule that exists neither that has neither a base nor hyp index"; 
				// recall: global mapping scheme is always built off the base cascade by default
				
				/**
				 * There are six possible cases here 
				 * (1) deletion of some sort including as part of non-bijective modification:
				 * 			ilbi == -1
				 * (2) insertion of some sort including as part of a non-bijective modification
				 * 			ilhi == -1
				 * (3) forward relocdation that has not yet been handled/realized in ruleCorrespondences
				 * 			ilbi > hi  
				 * 				note that forward relocdation from X to Y can be reinterpeted as Y-X backward relocdations each by one place instead 
				 * 					to avoid this problem we are forced to use the HashMap relocdations 
				 * (4) forward relocdation that has already been handled/realized in ruleCorrespondences
				 * 			ilhi < bi && ilhi != -1 && findInt(ruleCorrespondences[1], hi) != -1
				 * (5) backward relocdation that has not yet been handled/realized in ruleCorrespondences -- detectable on HB side
				 * 			ilhi > bi 
				 * (6) backward relocdation that has already been handled/realized in ruleCorrespondences
				 * 		
				 */
				//TODO curate cmt block
				
				//first -- ensure that stumbling upon indices effected by already handled relocdation operations
					// do not cause redundant or erroneous behaviors
				// when we come upon a "crossed out" cell (i.e. wiht -2 in it) we know this must have been from an already handled relocdation.
				// due to how we iterate through this algorithm, this will only ever happen for ilhi -- i.e. only on the hyp side of things
				
				
				
				if(ilbi==-2) bi++; 
				else
				{
					if(ilhi == -1) // insertion of some sort (including from a non-bijective modification)
					{
						ruleCorrespondences[0][gi] = -1; 
						ruleCorrespondences[1][gi] = hi++; 
					}
					else if (ilbi == -1) //deletion of some sort including from a non-bijective modification
					{
						ruleCorrespondences[0][gi] = bi++; 
						ruleCorrespondences[1][gi] = -1; 
					}
					else 
					{
						//now must be some sort of relocdation 
						
						if(relocdIsForward(gi, hi, ilbi, ilhi))
						{
							int mapped_to_bi = UTILS.findInt(dumRIMHB, bi); 
							assert (mapped_to_bi == -1) == (ilhi == -1) : "ERROR: baseline index "+bi+" is never mapped to..."; 
							ruleCorrespondences[0][gi] = bi++; 
							ruleCorrespondences[1][gi] = mapped_to_bi; 
							dumRIMHB[mapped_to_bi] = -2; //cross-out. 
						}
						else
						{
							System.out.println("hi "+hi); //TODO debuggin
							
							int mapped_to_hi = UTILS.findInt(dumRIMBH, hi); 
							assert (mapped_to_hi == -1) == (ilbi == -1) : "ERROR: hyp index "+hi+" is never mapped to..."; 
							ruleCorrespondences[0][gi] = bi; 
							ruleCorrespondences[1][gi] = ilhi; 
							dumRIMBH[ilhi] = -2; //cross-out. 
							dumRIMHB[hi] = -2; //cross-out
						}
						
						
						//TODO below is abrogated 
						/**
						// note that if bi == hi, it doesn't matter which way we consider this except for debugging purposes
						// for simplicity purposes -- go with whatever
						int mapped_to_bi = UTILS.findInt(dumRIMHB, bi); 
						assert (mapped_to_bi == -1) == (ilhi == -1) : "ERROR: baseline index "+bi+" is never mapped to..."; 
						ruleCorrespondences[0][gi] = bi++; 
						ruleCorrespondences[1][gi] = mapped_to_bi; 
						dumRIMHB[mapped_to_bi] = -2; //cross-out. 
						*/
					}
				}
			}
	
		
		
---
		
		//now we'll test et 7, heighten, which should be changed. 
		
		//TODO continue lexical effect testing 
		
//TODO this. 




---

		 
TODO - jargon file. 

instant -- spots between rules

---

