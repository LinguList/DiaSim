// extract GOLD stages as defined in lexicon. 
// from extractCascade: 
	// goldStagesSet, blackStagesSet
	// NUM_GOLD_STAGES, NUM_BLACK_STAGES
	
	//Behavior based on stipulations on gold stages (or lack of stipulations) in lexicon file and cascade file: 
	// if there is no lexicon header : count number of columns
		// if there is only one column, obviously it is just the input
		// otherwise -- first is input, last is output, any in between are gold stages
	// if there is a lexicon header 
		// lexicon header is identified by being flagged by ~ 
			// i.e. UTILS.GOLD_STAGENAME_FLAG
				// (delimiter is still , i.e. LEX_DELIM )
		// first stage regardless of name is still "in(put)" 
		// for the others the names are saved,
			// and need to be matched...
				// if any are not matched -- throw errro 
				// if last is "Out(put)" or "Res(ult)" it does not need to be matched
					// and is interpreted to be the output gold stage.
	// to be called AFTER extractCascade is. 
	// global variables modified as part of this process:
		// stageOrdering
		// goldOutput -- determined here. 
		// goldStageNames
		// goldStageInstants
		// blackStageNames
		// blackStageInstants
	private static void processLexFileHeader(String firstlineproxy)
	{
		System.out.println("Processing lexicon stipulations for gold stages..."); 

		int numCols = firstlineproxy.contains(""+UTILS.LEX_DELIM) ? 
			firstlineproxy.split(""+UTILS.LEX_DELIM).length : 1	;
		
	}
	
	// changes one gold stage to a black stage
		// modifying global variables and data structures as appropriate. 
	// int gsi -- the index in data structures of the stage we are blackening. 
	private static void blackenGoldStage(int gsi)
	{
		if (goldStagesSet)
		{
			int[] oldGoldStageInstants =  new int[NUM_GOLD_STAGES];
			String[] oldGoldStageNames = new String[NUM_GOLD_STAGES];
			for (int gi = 0; gi < NUM_GOLD_STAGES; gi++)
			{
				oldGoldStageInstants[gi] = goldStageInstants[gi]; 
				oldGoldStageNames[gi] = goldStageNames[gi]; 	
			}
		}
		if (blackStagesSet)
		{ 
			int[] oldBlackStageInstants = new int[NUM_BLACK_STAGES]; 
			String[] oldBlackStageNames = new String[NUM_BLACK_STAGES];
			for (int bi = 0; bi < NUM_BLACK_STAGES; bi++)
			{
				oldBlackStageInstants[bi] = blackStageInstants[bi];
				oldBlackStageNames[bi] = blackStageNames[bi];
			}
		}
		
		int instantToBlacken = goldStageInstants[gsi];
		String nameToBlacken = goldStageNames[gsi];
		
		NUM_GOLD_STAGES--;
		NUM_BLACK_STAGES++;
		if (NUM_BLACK_STAGES == 1)	blackStagesSet = true;
		if (NUM_GOLD_STAGES == 0)	goldStagesSet = false; 
		goldStageGoldLexica = new Lexicon[NUM_GOLD_STAGES];
		
		goldStageNames = new String[NUM_GOLD_STAGES];
		goldStageInstants = new String[NUM_GOLD_STAGES]; 
		blackStageNames = new String[NUM_BLACK_STAGES];
		blackStageInstants = new String[NUM_BLACK_STAGES]; 
		
		int soi = 0, bsloc = 0; 
		while ( !stageOrdering[soi].equals("g"+gsi) ) 
		{
			if(stageOrdering[soi].charAt(0) == 'g')
			{
				int curgi = Integer.parseInt(stageOrdering[soi].substring(1)); 
				goldStageNames[curgi] = oldGoldStageNames[curgi];
				goldStageInstants[curgi] = oldGoldStageInstants[curgi];  
			}
			else
			{
				assert stageOrdering[soi].charAt(0) == 'b' : "Global variable stageOrdering misconstructed!"; 
				int curbi = Integer.parseInt(stageOrdering[soi].substring(1)); 
				assert curbi == bsloc : "Error: a black stage was skipped in stageOrdering!"; 
				blackStageNames[curbi] = oldBlackStageNames[curbi]; 
				blackStageInstants[curbi] = oldBlackStageInstants[curbi]; 
				bsloc++; 
			}
			soi++; 
			assert soi < stageOrdering.length : "ERROR: stage we are blackening was never found in stageOrdering!" ;
		}
		blackStageNames[bsloc] = oldGoldStageNames[gsi] ; 
		blackStageInstants[bsloc] = oldGoldStageInstants[gsi] ;
		stageOrdering[soi] = "b"+bsloc; 
		int isg = gsi; 
		while(isg < NUM_GOLD_STAGES)
		{
			goldStageNames[isg] = oldGoldStageNames[isg+1]; 
			goldStageInstants[isg] = oldGoldStageInstants[isg+1]; 
			isg++; 
		}
		bsloc++;		
		while(bsloc < NUM_BLACK_STAGES)
		{ 
			blackStageNames[bsloc] = oldBlackStageNames[bsloc-1];
			blackStageInstants[bsloc] = oldBlackStageInstants[bsloc-1];
			bsloc++; 
		}
		
	}
	